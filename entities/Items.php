<?php

namespace abdualiym\cms\entities;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yiidreamteam\upload\FileUploadBehavior;

/**
 * This is the model class for table "cms_items".
 *
 * @property int         $id
 * @property int         $entity_id
 * @property string      $slug
 * @property string|null $text_1_0
 * @property string|null $text_1_1
 * @property string|null $text_1_2
 * @property string|null $text_1_3
 * @property string|null $text_1_4
 * @property string|null $text_2_0
 * @property string|null $text_2_1
 * @property string|null $text_2_2
 * @property string|null $text_2_3
 * @property string|null $text_2_4
 * @property string|null $text_3_0
 * @property string|null $text_3_1
 * @property string|null $text_3_2
 * @property string|null $text_3_3
 * @property string|null $text_3_4
 * @property string|null $text_4_0
 * @property string|null $text_4_1
 * @property string|null $text_4_2
 * @property string|null $text_4_3
 * @property string|null $text_4_4
 * @property string|null $text_5_0
 * @property string|null $text_5_1
 * @property string|null $text_5_2
 * @property string|null $text_5_3
 * @property string|null $text_5_4
 * @property string|null $text_6_0
 * @property string|null $text_6_1
 * @property string|null $text_6_2
 * @property string|null $text_6_3
 * @property string|null $text_6_4
 * @property string|null $text_7_0
 * @property string|null $text_7_1
 * @property string|null $text_7_2
 * @property string|null $text_7_3
 * @property string|null $text_7_4
 * @property string|null $file_1_0
 * @property string|null $file_1_1
 * @property string|null $file_1_2
 * @property string|null $file_1_3
 * @property string|null $file_1_4
 * @property string|null $file_2_0
 * @property string|null $file_2_1
 * @property string|null $file_2_2
 * @property string|null $file_2_3
 * @property string|null $file_2_4
 * @property string|null $file_3_0
 * @property string|null $file_3_1
 * @property string|null $file_3_2
 * @property string|null $file_3_3
 * @property string|null $file_3_4
 * @property int|null    $date
 * @property int|null    $status
 * @property int         $created_at
 * @property int         $updated_at
 *
 * @property Entities    $entity
 */
class Items extends ActiveRecord
{
	const STATUS_DRAFT = 0;
	const STATUS_ACTIVE = 1;
	/**
	 * @var mixed|null
	 */
	public $options;

	public function getOptionValue(CaE $cae)
	{
		return (isset($this->options[$cae->collection->slug]))
			? $this->options[$cae->collection->slug]
			: (($cae->collection->optionDefault) ? $cae->collection->optionDefault->id : null);
	}

	/**
	 * {@inheritdoc}
	 */
	public static function tableName()
	{
		return 'cms_items';
	}

	public function getImageUrl($attr, $width = null, $height = null, $resizeType = null)
	{
		return Image::get($this, $attr, $width, $height, $resizeType);
	}

	public function beforeSave($insert)
	{
		$entity = Entities::findOne($this->entity_id);
		if($insert)
			if($entity->use_status != null)
				$this->status = self::STATUS_DRAFT;

		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	public function afterSave($insert, $changedAttributes)
	{
		parent::afterSave($insert, $changedAttributes);

		OaI::deleteAll(['item_id' => $this->id]);

		foreach($this->options as $collectionSlug => $optionIds)
			if(is_array($optionIds))
				foreach($optionIds as $optionId) {
					$model = new OaI();
					$model->option_id = $optionId;
					$model->item_id = $this->id;
					$model->save();
				}
			else {
				$model = new OaI();
				$model->option_id = $optionIds;
				$model->item_id = $this->id;
				$model->save();
			}
		return true;
	}

	public function afterFind()
	{
		parent::afterFind();

		foreach(OaI::findAll(['item_id' => $this->id]) as $oai)
			foreach($this->entity->caes as $cae)
				foreach($cae->collection->options as $option)
					if($option->id === $oai->option_id)
						switch($cae->type) {
							case CaE::TYPE_CHECKBOX:
								$this->options[$cae->collection->slug][] = $oai->option_id;
								break;
							case CaE::TYPE_SELECT:
							case CaE::TYPE_RADIO:
								$this->options[$cae->collection->slug] = $oai->option_id;
								break;
						}
	}

	public function behaviors()
	{
		return [
			TimestampBehavior::class,
			'slug' => [
				'class' => 'Zelenin\yii\behaviors\Slug',
				'slugAttribute' => 'slug',
				'attribute' => 'text_1_0',
				// optional params
				'ensureUnique' => true,
				'replacement' => '-',
				'lowercase' => true,
				// false = changes after every change for $attribute
				'immutable' => false,
				// If intl extension is enabled, see http://userguide.icu-project.org/transforms/general.
				'transliterateOptions' => 'Russian-Latin/BGN; Any-Latin; Latin-ASCII; NFD; [:Nonspacing Mark:] Remove; NFC;'
			],
			$this->getImageUploadBehaviorConfig('file_1_0'),
			$this->getImageUploadBehaviorConfig('file_1_1'),
			$this->getImageUploadBehaviorConfig('file_1_2'),
			$this->getImageUploadBehaviorConfig('file_1_3'),
			$this->getImageUploadBehaviorConfig('file_1_4'),
			$this->getImageUploadBehaviorConfig('file_2_0'),
			$this->getImageUploadBehaviorConfig('file_2_1'),
			$this->getImageUploadBehaviorConfig('file_2_2'),
			$this->getImageUploadBehaviorConfig('file_2_3'),
			$this->getImageUploadBehaviorConfig('file_2_4'),
			$this->getImageUploadBehaviorConfig('file_3_0'),
			$this->getImageUploadBehaviorConfig('file_3_1'),
			$this->getImageUploadBehaviorConfig('file_3_2'),
			$this->getImageUploadBehaviorConfig('file_3_3'),
			$this->getImageUploadBehaviorConfig('file_3_4'),

		];
	}

	private function getImageUploadBehaviorConfig($attribute)
	{
		$module = Yii::$app->getModule('slider');

		return [
			'class' => FileUploadBehavior::class,
			'attribute' => $attribute,
			'filePath' => $module->storageRoot . '/data/items/[[attribute_id]]/[[filename]].[[extension]]',
			'fileUrl' => $module->storageHost . '/data/items/[[attribute_id]]/[[filename]].[[extension]]',
		];
	}

	/**
	 * {@inheritdoc}
	 */
	public function rules()
	{
		return [
			[[
				'file_1_0',
				'file_1_1',
				'file_1_2',
				'file_1_3',
				'file_1_4',
				'file_2_0',
				'file_2_1',
				'file_2_2',
				'file_2_3',
				'file_2_4',
				'file_3_0',
				'file_3_1',
				'file_3_2',
				'file_3_3',
				'file_3_4',
			], 'file'],
			['options', 'safe'],
			[['entity_id'], 'required'],
			[['entity_id', 'date', 'status'], 'integer'],
			[['text_1_0', 'text_1_1', 'text_1_2', 'text_1_3', 'text_1_4', 'text_2_0', 'text_2_1', 'text_2_2', 'text_2_3', 'text_2_4', 'text_3_0', 'text_3_1', 'text_3_2', 'text_3_3', 'text_3_4', 'text_4_0', 'text_4_1', 'text_4_2', 'text_4_3', 'text_4_4', 'text_5_0', 'text_5_1', 'text_5_2', 'text_5_3', 'text_5_4', 'text_6_0', 'text_6_1', 'text_6_2', 'text_6_3', 'text_6_4', 'text_7_0', 'text_7_1', 'text_7_2', 'text_7_3', 'text_7_4'], 'string'],
			['slug', 'string', 'max' => 255],
			[['slug'], 'unique'],
			[['entity_id'], 'exist', 'skipOnError' => true, 'targetClass' => Entities::class, 'targetAttribute' => ['entity_id' => 'id']],
		];
	}

	/**
	 * {@inheritdoc}
	 */
	public function attributeLabels()
	{
		$language0 = isset(Yii::$app->params['cms']['languages2'][0]) ? Yii::$app->params['cms']['languages2'][0] : '';
		$language1 = isset(Yii::$app->params['cms']['languages2'][1]) ? Yii::$app->params['cms']['languages2'][1] : '';
		$language2 = isset(Yii::$app->params['cms']['languages2'][2]) ? Yii::$app->params['cms']['languages2'][2] : '';
		$language3 = isset(Yii::$app->params['cms']['languages2'][3]) ? Yii::$app->params['cms']['languages2'][3] : '';
		$language4 = isset(Yii::$app->params['cms']['languages2'][4]) ? Yii::$app->params['cms']['languages2'][4] : '';

		return [
			'id' => Yii::t('cms', 'ID'),
			'entity_id' => Yii::t('cms', 'Entity ID'),
			'slug' => Yii::t('cms', 'Slug'),
			'text_1_0' => Yii::t('cms', 'Text 1') . '(' . $language0 . ')',
			'text_1_1' => Yii::t('cms', 'Text 1') . '(' . $language1 . ')',
			'text_1_2' => Yii::t('cms', 'Text 1') . '(' . $language2 . ')',
			'text_1_3' => Yii::t('cms', 'Text 1') . '(' . $language3 . ')',
			'text_1_4' => Yii::t('cms', 'Text 1') . '(' . $language4 . ')',
			'text_2_0' => Yii::t('cms', 'Text 2') . '(' . $language0 . ')',
			'text_2_1' => Yii::t('cms', 'Text 2') . '(' . $language1 . ')',
			'text_2_2' => Yii::t('cms', 'Text 2') . '(' . $language2 . ')',
			'text_2_3' => Yii::t('cms', 'Text 2') . '(' . $language3 . ')',
			'text_2_4' => Yii::t('cms', 'Text 2') . '(' . $language4 . ')',
			'text_3_0' => Yii::t('cms', 'Text 3') . '(' . $language0 . ')',
			'text_3_1' => Yii::t('cms', 'Text 3') . '(' . $language1 . ')',
			'text_3_2' => Yii::t('cms', 'Text 3') . '(' . $language2 . ')',
			'text_3_3' => Yii::t('cms', 'Text 3') . '(' . $language3 . ')',
			'text_3_4' => Yii::t('cms', 'Text 3') . '(' . $language4 . ')',
			'text_4_0' => Yii::t('cms', 'Text 4') . '(' . $language0 . ')',
			'text_4_1' => Yii::t('cms', 'Text 4') . '(' . $language1 . ')',
			'text_4_2' => Yii::t('cms', 'Text 4') . '(' . $language2 . ')',
			'text_4_3' => Yii::t('cms', 'Text 4') . '(' . $language3 . ')',
			'text_4_4' => Yii::t('cms', 'Text 4') . '(' . $language4 . ')',
			'text_5_0' => Yii::t('cms', 'Text 5') . '(' . $language0 . ')',
			'text_5_1' => Yii::t('cms', 'Text 5') . '(' . $language1 . ')',
			'text_5_2' => Yii::t('cms', 'Text 5') . '(' . $language2 . ')',
			'text_5_3' => Yii::t('cms', 'Text 5') . '(' . $language3 . ')',
			'text_5_4' => Yii::t('cms', 'Text 5') . '(' . $language4 . ')',
			'text_6_0' => Yii::t('cms', 'Text 6') . '(' . $language0 . ')',
			'text_6_1' => Yii::t('cms', 'Text 6') . '(' . $language1 . ')',
			'text_6_2' => Yii::t('cms', 'Text 6') . '(' . $language2 . ')',
			'text_6_3' => Yii::t('cms', 'Text 6') . '(' . $language3 . ')',
			'text_6_4' => Yii::t('cms', 'Text 6') . '(' . $language4 . ')',
			'text_7_0' => Yii::t('cms', 'Text 7') . '(' . $language0 . ')',
			'text_7_1' => Yii::t('cms', 'Text 7') . '(' . $language1 . ')',
			'text_7_2' => Yii::t('cms', 'Text 7') . '(' . $language2 . ')',
			'text_7_3' => Yii::t('cms', 'Text 7') . '(' . $language3 . ')',
			'text_7_4' => Yii::t('cms', 'Text 7') . '(' . $language4 . ')',
			'file_1_0' => Yii::t('cms', 'File 1') . '(' . $language0 . ')',
			'file_1_1' => Yii::t('cms', 'File 1') . '(' . $language1 . ')',
			'file_1_2' => Yii::t('cms', 'File 1') . '(' . $language2 . ')',
			'file_1_3' => Yii::t('cms', 'File 1') . '(' . $language3 . ')',
			'file_1_4' => Yii::t('cms', 'File 1') . '(' . $language4 . ')',
			'file_2_0' => Yii::t('cms', 'File 2') . '(' . $language0 . ')',
			'file_2_1' => Yii::t('cms', 'File 2') . '(' . $language1 . ')',
			'file_2_2' => Yii::t('cms', 'File 2') . '(' . $language2 . ')',
			'file_2_3' => Yii::t('cms', 'File 2') . '(' . $language3 . ')',
			'file_2_4' => Yii::t('cms', 'File 2') . '(' . $language4 . ')',
			'file_3_0' => Yii::t('cms', 'File 3') . '(' . $language0 . ')',
			'file_3_1' => Yii::t('cms', 'File 3') . '(' . $language1 . ')',
			'file_3_2' => Yii::t('cms', 'File 3') . '(' . $language2 . ')',
			'file_3_3' => Yii::t('cms', 'File 3') . '(' . $language3 . ')',
			'file_3_4' => Yii::t('cms', 'File 3') . '(' . $language4 . ')',
			'date' => Yii::t('cms', 'Date'),
			'status' => Yii::t('cms', 'Status'),
			'created_at' => Yii::t('cms', 'Created At'),
			'updated_at' => Yii::t('cms', 'Updated At'),
		];
	}

	/**
	 * Gets query for [[Entity]].
	 *
	 * @return ActiveQuery
	 */
	public function getEntity()
	{
		return $this->hasOne(Entities::class, ['id' => 'entity_id']);
	}
}
